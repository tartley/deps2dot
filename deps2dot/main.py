import sys

from .options import get_parser, parse_args, validate


NAME = 'deps2dot'

HEADER = """\
# Generated by deps2dot, https://github.com/tartley/deps2dot
"""

INDENT = "    "


def print_output(dot_lines):
    print(HEADER)
    for line in dot_lines:
        print(line)


def deps_to_dot(node, indent=0):
    yield '\n'.join(
        INDENT * indent + line
        for line in node.start.split('\n')
    )
    for child in node.children:
        for chunk in deps_to_dot(child, indent + 1):
            yield chunk
    yield '\n'.join(
        INDENT * indent + line
        for line in node.end.split('\n')
    )


ROOT_START = """\
digraph esperanto {

    graph [
    ]

    node [
    ]
"""
ROOT_END = """\
}
"""

class RootNode(object):
    
    start = ROOT_START
    end = ROOT_END

    def __init__(self):
        self.children = set()


class ModuleNode(RootNode):

    end = ""
    children = set()

    def __init__(self, root, name):
        self.name = name

    @property
    def start(self):
        return '"%s"\n' % (self.name,)


def read_file(filename):
    with open(filename) as filepointer:
        for line in filepointer:
            yield eval(line)

    
def read_deps(options):
    root = RootNode()
    for line in read_file(options.input):
        (start_root, start_name), (end_root, end_name) = line
        if end_root == end_name == None:
            root.children.add(ModuleNode(start_root, start_name))
    return root


def main():
    # setup.py install/develop creates an executable that calls this function
    print_output(
        deps_to_dot(
            read_deps(
                validate(
                    parse_args(
                        get_parser(NAME),
                        sys.argv[1:]
                    )
                )
            )
        )
    )
